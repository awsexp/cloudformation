AWSTemplateFormatVersion: "2010-09-09"
Description: Teemops ASG with ALB - only adds port 80 initially and then port 443 only added when SSL Cert is valid
Parameters:
  AMI:
    Description: EC2 AMI
    Type: AWS::EC2::Image::Id
  InstanceType:
    Description: Amazon EC2 instance type
    Type: String
  RootVolumeSize:
    Description: Root EBS Volume Size in GB
    Type: Number
  AppId:
    Description: Teemops App ID
    Type: String
  AppName:
    Description: Teemops App Name
    Type: String
  CustomerId:
    Description: Teemops Customer ID
    Type: String
  KeyPair:
    Description: EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
  VPC:
    Description: VPCId
    Type: String
  Subnet:
    Description: Subnets
    Type: List<AWS::EC2::Subnet::Id>
  SecurityGroup:
    Description: Security Group
    Type: AWS::EC2::SecurityGroup::Id
  AppEnvironment:
    Description: Which App Environment to install?
    Type: String
    AllowedValues: ['baseline', 'php', 'php71', 'node']
    Default: "baseline"
  Min:
    Description: Min for ASG
    Type: String
    Default: "1"
  Max:
    Description: Max for ASG
    Type: String
    Default: "2"
  ALBSubnets:
    Description: Subnets
    Type: List<AWS::EC2::Subnet::Id>
  HasPublicIp:
    Description: ASG instances have Public IP
    Type: String
    AllowedValues: ['true', 'false']
  SSLArn:
    Description: Amazon Certificate ARN
    Type: String
    Default: 'none'
Conditions:
  ConditionPublicIp: !Equals [!Ref HasPublicIp, 'true']
  ConditionSSL: !Not [!Equals [!Ref SSLArn, 'none']]
Resources:
  # TopsTopic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     Subscription:
  #     - Endpoint: !Ref 'SNSEmail'
  #       Protocol: email
  TopsLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      AssociatePublicIpAddress: !Ref HasPublicIp
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref RootVolumeSize
      IamInstanceProfile: !Ref TopsEc2InstanceProfile
      ImageId: !Ref AMI
      InstanceMonitoring: true
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      SecurityGroups: 
        - !Ref SecurityGroup
        - !Ref TopsEC2SGAllowALB
      UserData: !Base64
        Fn::Join:
        - ''
        - ['#!/bin/bash -xe

          ',
          'TOPS_DEPLOY_ENV=',
            !Ref AppEnvironment,
            '
            
            ',
            'bash <(curl -s https://s3-us-west-2.amazonaws.com/templates.teemops.com/teemdeploy.sh)']
  TopsASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnet
      LaunchConfigurationName: !Ref 'TopsLaunchConfig'
      MinSize: !Ref Min
      MaxSize: !Ref Max
      TargetGroupARNs:
        - !Ref TopsTargetGroup
      Tags:
        - Key: Name
          Value: !Ref AppName
          PropagateAtLaunch: true
        - Key: topsid
          Value: !Ref AppId
          PropagateAtLaunch: true
        - Key: topscustomerid
          Value: !Ref CustomerId
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: false
  TopsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      Name: !Join ["", ["teemops-", !Ref AppId, "-", !Ref AppName]] 
      TargetType: instance
  TopsALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '120'
      Name: !Join ["", ["teemops-", !Ref AppId, "-", !Ref AppName]]
      Subnets: !Ref ALBSubnets
      SecurityGroups:
        - !Ref TopsALBSG
  TopsALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TopsALB
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TopsTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'TopsALB'
      Port: 80
      Protocol: HTTP
  TopsALBListenerHTTPS:
    Condition: ConditionSSL
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TopsALB
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TopsTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'TopsALB'
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLArn
  TopsALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
  TopsEC2SGAllowALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ALB Access to Autoscaling group instances
      VpcId: !Ref 'VPC'
      # SecurityGroupIngress:
      # - IpProtocol: tcp
      #   FromPort: 80
      #   ToPort: 80
      #   SourceSecurityGroupOwnerId: !GetAtt [TopsALB, SourceSecurityGroup.OwnerAlias]
      #   SourceSecurityGroupName: !GetAtt [TopsALB, SourceSecurityGroup.GroupName]
  TopsEC2SGIngressAllowALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB to EC2
      GroupId: !Ref TopsEC2SGAllowALB
      IpProtocol: -1
      SourceSecurityGroupId: !Ref TopsALBSG
  TopsScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'TopsASG'
      Cooldown: '60'
      ScalingAdjustment: 1
  TopsScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'TopsASG'
      Cooldown: '60'
      ScalingAdjustment: -1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      AlarmActions: [!Ref 'TopsScaleUpPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'TopsASG'
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 80% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions: [!Ref 'TopsScaleDownPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'TopsASG'
      ComparisonOperator: LessThanThreshold
  TopsEc2Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
  TopsEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: TopsEc2Role
Outputs:
  ASGGroupName:
    Description: The Autoscaling group name created as part of the build
    Value: !Ref TopsASG
